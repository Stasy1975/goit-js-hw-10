{"mappings":"YAMA,IAEMA,EAAO,CACXC,gBAAiBC,SAASC,cAAc,iBACxCC,cAAeF,SAASC,cAAc,iBACtCE,eAAgBH,SAASC,cAAc,gBAKnCG,EAA2B,SAAAC,GAC/B,GAAIA,EAAaC,OAAS,GACxB,OAAOC,QAAQC,OAAO,YAGxB,GAAIH,EAAaC,OAAS,EACxB,MAAO,CACLG,KAAM,OACNC,OAAQL,EACLM,KACC,SAAAC,G,MACE,sBAAyDC,OAAnCD,EAAQE,MAAMC,IAAI,mBAAuCF,OAAtBD,EAAQI,KAAKC,SAAS,YAElFC,KAAK,KAGZ,GAA4B,IAAxBb,EAAaC,OAAc,CAC7B,IAAMa,EAAUd,EAAa,GAC7B,MAAO,CACLI,KAAM,UACNC,OAAQ,4BAENG,OADiBM,EAAQL,MAAMC,IAAI,mBAGzBF,OAFVM,EAAQH,KAAKC,SACd,2BAEcJ,OADHM,EAAQC,QAAQ,6BAEdP,OADCM,EAAQE,WAAW,4BACaR,OAAjCS,OAAOC,OAAOJ,EAAQK,WAAW,qBAM/CC,EAAc,WAClB3B,EAAKI,cAAcwB,UAAY,GAC/B5B,EAAKC,gBAAgB2B,UAAY,IAG7BC,EAAkB,SAAAC,GACtBH,IAEgC,SAA5BG,EAAmBnB,KACrBX,EAAKC,gBAAgB8B,mBACnB,YACAD,EAAmBlB,QAEgB,YAA5BkB,EAAmBnB,MAC5BX,EAAKI,cAAc2B,mBACjB,YACAD,EAAmBlB,SAenBoB,EAAgB,SAAAC,GACpB,MAAc,cAAVA,GALJN,SACAO,OAAOC,QAAQ,6CAQD,aAAVF,GAdJN,SACAO,OAAOE,KAAK,oEAiBZC,QAAQC,IAAIL,IAiBdjC,EAAKK,eAAekC,iBAClB,QACAC,UAhBe,SAAAC,GACf,IAAMC,EA9Ee,SAAAD,G,OAAKA,EAAEE,OAAOC,MAAMC,OAAOC,cA8ExBC,CAAeN,GAEf,KAApBC,EAKJM,eAAeN,GACZO,KAAK3C,GACL2C,KAAKpB,GACLqB,MAAMlB,GAPPL,MAzFmB,M","sources":["src/index.js"],"sourcesContent":["import './css/styles.css';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import debounce from 'lodash.debounce';\n\n// import { fetchCountries } from './fetchCountries';\n\nconst DEBOUNCE_DELAY = 300;\n\nconst refs = {\n  countriesListEl: document.querySelector('.country-list'),\n  countryInfoEl: document.querySelector('.country-info'),\n  countryInputEl: document.querySelector('#search-box'),\n};\n\nconst getCountryName = e => e.target.value.trim().toLowerCase();\n\nconst renderSearchResultMarkup = countriesArr => {\n  if (countriesArr.length > 10) {\n    return Promise.reject('too many');\n  }\n\n  if (countriesArr.length > 1) {\n    return {\n      type: 'list',\n      markup: countriesArr\n        .map(\n          country =>\n            `<li><span><img src=${country.flags.svg} alt=\"\"></span>${country.name.official}</li>`\n        )\n        .join(''),\n    };\n  }\n  if (countriesArr.length === 1) {\n    const country = countriesArr[0];\n    return {\n      type: 'details',\n      markup: `\n    <h2><span><img src=${country.flags.svg} alt=\"\"></span>${\n        country.name.official\n      }</h2>\n    <p>Capital: ${country.capital}</p>\n    <p>Population: ${country.population}</p>\n    <p>Languages: ${Object.values(country.languages)}</p>    \n    `,\n    };\n  }\n};\n\nconst clearResult = () => {\n  refs.countryInfoEl.innerHTML = '';\n  refs.countriesListEl.innerHTML = '';\n};\n\nconst addSearchResult = searchResultMarkup => {\n  clearResult();\n\n  if (searchResultMarkup.type === 'list') {\n    refs.countriesListEl.insertAdjacentHTML(\n      'beforeend',\n      searchResultMarkup.markup\n    );\n  } else if (searchResultMarkup.type === 'details') {\n    refs.countryInfoEl.insertAdjacentHTML(\n      'beforeend',\n      searchResultMarkup.markup\n    );\n  }\n};\n\nconst alarmToManyCountries = () => {\n  clearResult();\n  Notify.info('Too many matches found. Please enter a more specific name.');\n};\n\nconst alarmNotFound = () => {\n  clearResult();\n  Notify.failure('Oops, there is no country with that name');\n};\n\nconst errorsHandler = error => {\n  if (error === 'not found') {\n    alarmNotFound();\n    return;\n  }\n  if (error === 'too many') {\n    alarmToManyCountries();\n    return;\n  }\n  console.log(error);\n};\n\nconst doSearch = e => {\n  const searchedCountry = getCountryName(e);\n\n  if (searchedCountry === '') {\n    clearResult();\n    return;\n  }\n\n  fetchCountries(searchedCountry)\n    .then(renderSearchResultMarkup)\n    .then(addSearchResult)\n    .catch(errorsHandler);\n};\n\nrefs.countryInputEl.addEventListener(\n  'input',\n  debounce(doSearch, DEBOUNCE_DELAY)\n);\n"],"names":["$b8f9b7833fa37166$var$refs","countriesListEl","document","querySelector","countryInfoEl","countryInputEl","$b8f9b7833fa37166$var$renderSearchResultMarkup","countriesArr","length","Promise","reject","type","markup","map","country","concat","flags","svg","name","official","join","country1","capital","population","Object","values","languages","$b8f9b7833fa37166$var$clearResult","innerHTML","$b8f9b7833fa37166$var$addSearchResult","searchResultMarkup","insertAdjacentHTML","$b8f9b7833fa37166$var$errorsHandler","error","Notify","failure","info","console","log","addEventListener","debounce","e","searchedCountry","target","value","trim","toLowerCase","$b8f9b7833fa37166$var$getCountryName","fetchCountries","then","catch"],"version":3,"file":"index.fcb3af51.js.map"}